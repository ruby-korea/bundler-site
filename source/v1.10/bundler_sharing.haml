%h2#sharing
  Sharing
.contents
  .bullet
    .description
      %h3#checking-your-code-into-version-control
        Checking Your Code into Version Control

      %p
        After developing your application for a while, check in the application together with the
        <code>Gemfile</code> and <code>Gemfile.lock</code> snapshot. Now, your repository has a
        record of the exact versions of all of the gems that you used the last time you know for
        sure that the application worked. Keep in mind that while your <code>Gemfile</code>
        lists only three gems (with varying degrees of version strictness), your application
        depends on dozens of gems, once you take into consideration all of the implicit
        requirements of the gems you depend on.

    %p.description
      This is important: <strong>the <code>Gemfile.lock</code> makes your application a single
      package of both your own code and the third-party code it ran the last time you know for
      sure that everything worked</strong>. Specifying exact versions of the third-party code
      you depend on in your <code>Gemfile</code> would not provide the same guarantee, because
      gems usually declare a range of versions for their dependencies.

    %p.description
      The next time you run <code>bundle install</code> on the same machine, bundler will see
      that it already has all of the dependencies you need, and skip the installation process.

    %p.description
      Do not check in the <code>.bundle</code> directory, or any of the files inside it. Those
      files are specific to each particular machine, and are used to persist installation options
      between runs of the <code>bundle install</code> command.

    %p.description
      If you have run <code>bundle pack</code>, the gems (although not the git gems) required
      by your bundle will be downloaded into <code>vendor/cache</code>. Bundler can run without
      connecting to the internet (or the RubyGems server) if all the gems you need are present
      in that folder and checked in to your source control. This is an <strong>optional</strong>
      step, and not recommended, due to the increase in size of your source control repository.

  .bullet
    %h3#sharing-your-application-with-other-developers
      Sharing Your Application With Other Developers

    %p.description
      When your co-developers (or you on another machine) check out your code, it will come
      with the exact versions of all the third-party code your application used on the machine
      that you last developed on (in the <code>Gemfile.lock</code>). When **they** run
      <code>bundle install</code>, bundler will find the <code>Gemfile.lock</code> and skip
      the dependency resolution step. Instead, it will install all of the same gems that you
      used on the original machine.

    %p.description
      In other words, you don't have to guess which versions of the dependencies you should
      install. In the example we've been using, even though <code>rack-cache</code> declares a
      dependency on <code>rack >= 0.4</code>, we know for sure it works with <code>rack
      1.2.1</code>. Even if the Rack team releases <code>rack 1.2.2</code>, bundler will
      always install <code>1.2.1</code>, the exact version of the gem that we know works. This
      relieves a large maintenance burden from application developers, because all machines
      always run the exact same third-party code.
