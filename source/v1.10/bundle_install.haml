%h2 bundle install

.contents
  .bullet
    .description
      애플리케이션이 Gemfile 안에 있는 의존성을 만족하는지 확인합니다.
    :code
      $ bundle install [--binstubs=PATH] [--clean] [--deployment] [--frozen]
                       [--full-index] [--gemfile=FILE] [--local] [--no-cache]
                       [--no-prune] [--path=PATH] [--quiet] [--shebang=STRING]
                       [--standalone[=GROUP [GROUP...]] [--system]
                       [--without=GROUP[ GROUP...]] [--retry=NUMBER]
                       [--trust-policy=SECURITYLEVEL]
    .notes
      %p
        옵션:
      %p
        <code>--binstubs</code>: ./bin 폴더에 실행 파일의 스텁을 생성합니다.
      %p
        <code>--clean</code>: 설치 후 자동으로 bundle clean을 실행합니다.
      %p
        <code>--deployment</code>: 배포, CI 환경에 최적화된 기본 값으로 설치합니다.
      %p
        <code>--frozen</code>: 이번 설치 이후 Gemfile.lock을 업데이트 할 수 없게 합니다.
      %p
        <code>--full-index</code>: API 엔드포인트 대신 rubygems의 모던 인덱스를 사용합니다.
      %p
        <code>--gemfile</code>: Gemfile 대신 지정한 젬파일을 사용합니다.
      %p
        <code>--jobs</code>: 병렬 워커를 사용해 설치합니다.
      %p
        <code>--local</code>: 원격에서 gem을 가져오지 않는 대신 캐시된 gem을 사용합니다.
      %p
        <code>--no-cache</code>: 갱신에 캐시된 gem을 사용하지 않습니다.
      %p
        <code>--no-prune</code>: 캐시에서 오래된 gem을 제거하지 않습니다.
      %p
        <code>--path</code>: 시스템 기본 값($BUNDLE_PATH나 $GEM_HOME) 대신 다른 경로를 지정합니다. 번들러는 이 기기에서 이 값을 기억할 것입니다.
      %p
        <code>--quiet</code>: 경고와 에러만 출력합니다.
      %p
        <code>--retry</code>: 실패한 네트워크, git 요청을 재시도합니다.
      %p
        <code>--shebang</code>: 시스템 기본 값(보통 'ruby') 대신 다른 쉬뱅(#!) 실행 이름을 지정합니다.
      %p
        <code>--standalone</code>: 번들러 런타임 없이 실행되는 번들을 만듭니다.
      %p
        <code>--system</code>: 시스템($BUNDLE_PATH 나 $GEM_HOME)에 설치합니다.
        이전에 이 애플리케이션의 번들이 어디에 설치되었든지 관계없습니다.
      %p
        <code>--trust-policy</code>: 인증된 gem을 다루기 위한 보안 수준을 설정합니다. 값으로 `LowSecurity`, `MediumSecurity`, `HighSecurity`를 사용할 수 있습니다.
      %p
        <code>--without</code>: 지정한 그룹의 gem을 제외합니다.
    .notes
      %p
        gem은 기본 시스템에 설치될 것입니다. 시스템 gem이 루트 권한의 장소(맥 OSX처럼)에
        설치 된다면 번들은 설치를 위해 관리자 비밀번호를 물어볼 것입니다.
      %p
        gem을 설치할 동안, 번들러는 <code>vendor/cache</code>와 시스템 gem을 체크합니다. gem이
        캐시되거나 설치되지 않았다면, 번들러는 Gemfile에서 선언한 소스에서 설치할 것입니다.
      %p
        <code>--system</code> 옵션은 기본 값입니다. 아래에 설명된 대로 <code>--path</code> 옵션을
        사용한 이후에 기본 값으로 되돌리고 싶을 때 넘기세요.

  .bullet#path
    .description
      이미 시스템 gem에 설치되어 있어도 시스템 gem의 저장소가 아닌 곳에 의존성을 설치합니다.
      이 경우에는, <code>vendor/bundle</code>에 설치합니다.
    .how
      :code
        $ bundle install --path vendor/bundle
      .notes
        또한 <code>bundle</code> 명령어, <code>Bundler.setup</code>, <code>Bundler.require</code>를
        위해 이 위치를 기억해둡니다.
      = link_to '자세한 내용은: Bundler.setup', './bundler_setup.html'
      = link_to '자세한 내용은: Bundler.require', './groups.html'

  .bullet#without
    .description
      명시적으로 제외한 그룹 외의 모든 의존성을 설치합니다.
    :code
      $ bundle install --without development test
    = link_to '자세한 내용은: 그룹', './groups.html'

  .bullet#deployment
    .description
      프로덕션이나 CI 서버에 모든 의존성을 설치합니다.
      개발 기기에서 이 플래그를 사용하지 <b>마세요.</b>
    :code
      $ bundle install --deployment
    .notes
      %p
        <code>--deployment</code> 플래그는 여러 가지의 배포나 CI에 친화적인 규칙을 활성화시킵니다.

      %ul
        %li
          모든 gem을 <code>vendor/bundle</code>에 격리합니다.
          (<code>--path vendor/bundle</code>과 같음)
        %li
          최신 <code>Gemfile.lock</code>을 필요로 합니다.
          (<code>--frozen</code>과 같음)
        %li ANSI 색상 출력을 비활성화 합니다.
        %li
          <code>bundle package</code>가 실행되었다면, rubygems.org에서 가져오지 않고,
          <code>vendor/cache</code> 안의 gem만 사용합니다.
    = link_to '자세한 내용은: 배포하기', './deploying.html'

  .bullet#jobs
    .description
      지정한 수의 워커를 사용하여 동시에 여러 개의 gem을 설치합니다.
    :code
      $ bundle install --jobs 4

  .bullet#retry
    .description
      실패한 네트워크, git 요청을 재시도합니다.
    :code
      $ bundle install --retry 3
