%h2 버전 관리의 추천 워크플로우
.contents
  .bullet#recommended_workflow
    .description
      %p
        일반적으로, 번들러로 관리된 애플리케이션으로 일할 때에는 이하의
        워크플로우를 사용하는 게 바람직합니다.
      %p
        처음 <code>Gemfile</code>을 생성한 다음에 다음 명령어를 실행합니다.
        :code
          $ bundle install
      %p
        결과로 나온 <code>Gemfile.lock</code>을 버전 관리합니다.
        :code
          $ git add Gemfile.lock
      %p
        이 저장소를 다른 기기에서 체크아웃할 때엔 다음 명령어를 실행합니다.
        :code
          $ bundle install
      %p
        이 저장소를 배포 기기에 체크아웃할 때엔 다음 명령어를 실행합니다.
        :code
          $ bundle install --deployment
      %p
        <code>Gemfile</code>을 변경한 후에, 새로운 의존성이나 갱신된 의존성을
        반영하기 위해서는 다음 명령어를 실행합니다.
        :code
          $ bundle install
      %p
        갱신된 <code>Gemfile.lock</code>이 버전 관리되는지 확인합니다.
        :code
          $ git add Gemfile.lock
      %p
        <code>bundle install</code>이 충돌을 보고하면, <code>Gemfile</code>
        에서 변경한 특정 gem을 수동으로 갱신해야 합니다.
        :code
          $ bundle update rails thin
      %p
        <code>Gemfile</code> 안에 있는 gem의 조건을 만족하면서 가능한 최신 버전으로
        갱신하려면, 다음 명령어를 실행합니다.
        :code
          $ bundle update

%h2 번들러 워크플로우 철저하게 살펴보기

.contents
  .bullet
    .description
      번들러는 시작하기 쉽습니다! 터미널 윈도우를 열고 이 명령어를 실행합니다.
    :code
      $ gem install bundler
    .notes
      %li
        처음 레일스 애플리케이션을 생성했을 때부터 <code>Gemfile</code>이 이미 포함되어 있습니다.
        (시나트라 같은) 다른 종류의 애플리케이션은 이 명령어를 실행합니다.

        :code
          $ bundle init

      %li
        <code>bundle init</code> 명령어는 수정할 수 있는 간단한 <code>Gemfile</code>을 생성합니다.

  .bullet
    .description
      <code>Gemfile</code>은 애플리케이션 루트에 의존성을 특정한 것입니다.
      이런 내용들이 들어있습니다.
    :code
      # lang: ruby
      source 'https://rubygems.org'
      gem 'nokogiri'
      gem 'rack', '~>1.1'
      gem 'rspec', :require => 'spec'

    .notes
      이 <code>Gemfile</code>은 여러 가지를 말해줍니다. 첫째, 번들러는
      <code>Gemfile</code> 안에 선언된 gem을 기본 값인
      <code>https://rubygems.org</code> 안에서 찾을 것입니다.
    = link_to '자세한 내용은: Gemfile', './gemfile.html'

  .bullet
    .description
      %p
        첫 의존성을 선언한 이후, 번들러에게 받도록 해야합니다.

        :code
          $ bundle install    # <code>bundle</code>은 <code>bundle install</code>의 단축입니다.

      %p
        번들러는 <code>rubygems.org</code>(아니면 다른 선언된 소스)에 접속해, 모든 필요한 gem의
        목록(지정한 요구사항을 충족하는 gem 목록)을 찾습니다. <code>Gemfile</code> 안의 모든 gem은
        각자 의존성을 가지고 있고 또 그 의존성의 일부는 각자의 의존성을 가지고 있기 때문에,
        <code>bundle install</code>을 실행하면 위의 <code>Gemfile</code>로도 꽤 많은 gem이 설치됩니다.

        :code
            $ bundle install
            Fetching gem metadata from https://rubygems.org/
            Resolving dependencies...
            Using rake (0.8.7)
            Using abstract (1.0.0)
            Installing activesupport (3.0.0.rc)
            Using builder (2.1.2)
            Using i18n (0.4.1)
            Installing activemodel (3.0.0.rc)
            Using erubis (2.6.6)
            Using rack (1.2.1)
            Installing rack-mount (0.6.9)
            Using rack-test (0.5.4)
            Using tzinfo (0.3.22)
            Installing actionpack (3.0.0.rc)
            Using mime-types (1.16)
            Using polyglot (0.3.1)
            Using treetop (1.4.8)
            Using mail (2.2.5)
            Installing actionmailer (3.0.0.rc)
            Using arel (0.4.0)
            Installing activerecord (3.0.0.rc)
            Installing activeresource (3.0.0.rc)
            Using bundler (1.0.0.rc.3)
            Installing nokogiri (1.4.3.1) with native extensions
            Installing rack-cache (0.5.2)
            Installing thor (0.14.0)
            Installing railties (3.0.0.rc)
            Installing rails (3.0.0.rc)
            Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

      %p
        필요한 gem 중 일부가 이미 설치되어 있다면, 번들러는 그것을 사용합니다. 시스템에서 필요한
        gem을 모두 설치한 후, 번들러는 <code>Gemfile.lock</code>에 설치된 모든 gem과 버전
        정보의 스냅숏을 기록합니다.

        .notes

          %li
            <code>bundle install</code>이 <code>Gemfile</code>과 <code>Gemfile.lock</code> 사이에
            충돌을 보고한다면 다음 명령을 실행합니다.

            :code
              $ bundle update sinatra

          %li
            이 명령어는 Sinatra gem뿐만 아니라 시나트라의 모든 의존성을 갱신합니다.

          %p
            %li
              <code>Gemfile</code> 안의 모든 가능한 최신 버전을 갱신하려면, 다음을 실행합니다.

              :code
                $ bundle update

          %li
            <code>Gemfile.lock</code>이 변경되었다면, 반드시 버전 관리에 넣도록 합니다.
            이렇게 하면, 성공적으로 애플리케이션이 동작했을 때의 모든 서드파티 코드의 정확한 버전 이력이 남습니다.

          %li
            <code>git add Gemfile*</code> 명령어는 Gemfile과 Gemfile.lock 파일을 저장소에 추가합니다. 이렇게 하면
            애플리케이션의 다른 개발자가 당신의 개발 환경과 같은 서드 파티 코드를 사용하도록 할 수 있습니다.
  .buttons
    = link_to '자세한 내용은: bundle install', './bundle_install.html'
    = link_to '자세한 내용은: bundle update', './bundle_update.html'
  .bullet
    .description
      애플리케이션 안에서 번들된 환경을 로드합니다.
    :code
      # lang: ruby
      require 'rubygems'
      require 'bundler/setup'

      # require your gems as usual
      require 'nokogiri'
    = link_to '자세한 내용은: Bundler.setup', './bundler_setup.html'
  .bullet
    .description
      번들 안의 gem과 같이 오는 실행 파일을 실행합니다.
    :code
      $ bundle exec rspec spec/models
    .notes
      %p
        어떤 경우에는, <code>bundle exec</code> 없이 실행 파일이 실행 될 수
        있습니다. 시스템에 실행 파일이 설치 되어있고 번들에 있는 어떤 gem과도
        충돌 하지 않을 때라면요.
      %p
        하지만 이 상태는 신뢰할 수 없고 나중에 상당한 문제가 될 수 있습니다.
        움직이는 것처럼 보인다고 하더라도, 미래나 다른 기기에서는 움직이지
        않을 수 있습니다.
  .bullet
    .description
      마지막으로, 번들 안에 있는 gem의 단축 명령이 필요하다면 이렇게 할 수 있습니다.
    :code
      $ bundle install --binstubs
      $ bin/rspec spec/models
    .notes
      이 실행 파일들은 번들의 범위로 <code>bin</code> 안에 설치되며 언제나
      동작할 것입니다.
    = link_to '자세한 내용은: 실행파일', './man/bundle-exec.1.html'
