<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bundler Blog</title>
  <subtitle>The latest news on Bundler</subtitle>
  <id>http://bundler.io/blog</id>
  <link href="http://bundler.io/blog"/>
  <link href="http://bundler.io/blog/feed.xml" rel="self"/>
  <updated>2015-12-13T04:00:00+09:00</updated>
  <author>
    <name>The Bundler Team</name>
  </author>
  <entry>
    <title>버전 1.11 릴리스</title>
    <link rel="alternate" href="http://bundler.io/bundler-site/blog/2015/12/12/version-1-11-released.html"/>
    <id>http://bundler.io/bundler-site/blog/2015/12/12/version-1-11-released.html</id>
    <published>2015-12-13T04:00:00+09:00</published>
    <updated>2015-12-14T20:51:37+09:00</updated>
    <author>
      <name>Samuel Giddins</name>
    </author>
    <content type="html">&lt;p&gt;번들러 1.11이 왔습니다! 저번 릴리스로부터 6개월 반이 지나고나서야 드디어 1.11을 내보낼 준비가
되었습니다.&lt;/p&gt;

&lt;p&gt;이것이 좀 오래 걸리긴 했지만, 거기에는 그럴만한 이유가 있었습니다. 이번 여름, 팀은 _4명_의
Google Summer of Code 학생들을 코칭하는데 분주했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 젬 인덱스 작업을 많이 진전시켰으며, 이는 1.12에 포함될 예정입니다.&lt;/li&gt;
  &lt;li&gt;번들러 웹사이트와 온라인 문서를 많이 개선했습니다.&lt;/li&gt;
  &lt;li&gt;번들러 2.0을 위한 기초 작업이 진행되었습니다.&lt;/li&gt;
  &lt;li&gt;새로운 플러그인 시스템의 시제품을 만들었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나아가, 번들러 코어 팀은 번들러 자체의 개발 경험을 향상시키는 데에 많은 시간을 보냈습니다.
번들러의 코드는 5살이 되었으며, 400명 이상의 기여자들이 작성한 코드들로 구성되어 있습니다.
이는 점점 코드에 기여하는 것을 어렵게 만들고 있으며, 또한 번들러의 모든 코드들이 같은 기준에
맞추어져서 작성된 것인지 보증할 수 없게 만들었습니다(그리고 이는 향후 5년간도 그럴 것입니다).
이 코드들을 좀 더 일관성있게 만들기 위해 RoboCop(과 그 스타일 가이드)를 도입하고,
&lt;code&gt;master&lt;/code&gt;가 실패하지 않도록 코드 리뷰를 통과한 모든 새 코드를 담당하는 빌드 봇을 도입했습니다.
이 것은 무척 큰 진전이며, 최고의 릴리즈가 될 것이라 확신합니다.&lt;/p&gt;

&lt;p&gt;이 부분은 제쳐두고, 이렇게 오래 걸린 릴리스에 어떤 것들이 포함되어 있을까요?&lt;/p&gt;

&lt;h3 id="section"&gt;새 기능&lt;/h3&gt;

&lt;p&gt;우선, 수년간 쌓여있던 번들러의 이슈를 정리했으며, 이를 에러 메시지에 반영했습니다. 최종 목표는
예외를 발생시키고 백트레이스를 보여주는 대신, 도움이 되는 에러 메시지를 출력하는 것이고,
거의 다 했습니다.&lt;/p&gt;

&lt;p&gt;의존성 해결기에도 몇가지 변경사항이 있었습니다. 에러 메시지의 출력 형태 개선에 더불어, 버전 충돌이
발생했을 경우 현재 활성화되어 있는 젬의 목록과 각각의 버전 정보를 출력하여, 충돌을 해결하는 가장 좋은
방법을 찾을 수 있도록 도와줍니다. 나아가, 의존성 해결이 무척 오래 걸리는 특정 상황에서의 속도가 25배
이상 빨라졌습니다.&lt;/p&gt;

&lt;p&gt;마지막으로, 현재 버전에서 젬의 의존성을 해결하기 위한 준비 작업을 진행중입니다. 새 인덱스가 릴리스 되면,
번들러는 &lt;code&gt;required_ruby_version&lt;/code&gt;를 통해 현재 실행중인 루비의 버전을 확인하고 맞는 젬을 선택할
수 있을 것입니다.&lt;/p&gt;

&lt;h3 id="section-1"&gt;버그 수정&lt;/h3&gt;

&lt;p&gt;사실 이 릴리스의 가장 중요한 변경점은 400개 이상의 커밋에 걸쳐, 50개의 버그를 수정했다는 점에 있습니다.
다시 말하자면 이번 버전은 지금까지 중에 가장 빠르고, 가장 안정적인 버전이 될 것입니다.&lt;/p&gt;

&lt;h3 id="section-2"&gt;다음 예정&lt;/h3&gt;

&lt;p&gt;이미 말했듯이, 무척 오래 걸린 이번 릴리즈는 저희의 작업 속도가 느려졌다는 의미가 아닙니다. 실제로는 정반대입니다!
&lt;em&gt;현재&lt;/em&gt; 무척 활발하게 번들러 1.12와 2.0을 작업중이며, 가급적 빠르게 새 인덱스 작업을 마무리지어서
공개하겠습니다.&lt;/p&gt;

&lt;h4 id="section-3"&gt;업데이트하기&lt;/h4&gt;

&lt;p&gt;최신 번들러 릴리스를 인스톨하기 위해서는 다음을 실행하세요.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ [sudo] gem install bundler
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;더 자세한 설명은 
&lt;a href="https://github.com/bundler/bundler/blob/v1.11.0/CHANGELOG.md#1110-2015-12-12"&gt;Changelog&lt;/a&gt;에서 보실 수 있습니다!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Version 1.10 released</title>
    <link rel="alternate" href="http://bundler.io/bundler-site/blog/2015/06/24/version-1-10-released.html"/>
    <id>http://bundler.io/bundler-site/blog/2015/06/24/version-1-10-released.html</id>
    <published>2015-06-24T14:36:00+09:00</published>
    <updated>2015-07-29T04:52:46+09:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;p&gt;Bundler 1.10 is out! In fact, Bundler 1.10.5 is out today, so we thought it was high time to let everyone know about it. &lt;/p&gt;

&lt;p&gt;This release comes with a bunch of new features: the &lt;code&gt;lock&lt;/code&gt; command, support for inline gemfiles in scripts, the ability to disable post-install messages, optional groups, conditional gem installation, dramatically improved &lt;code&gt;outdated&lt;/code&gt; output, and the option to force installed gems to be downloaded and installed again.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/jnchito/items/a9907114bc56af67d0b0"&gt;日本語訳 / Japanese translation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="new-features"&gt;New features&lt;/h3&gt;

&lt;p&gt;First up, the new &lt;code&gt;lock&lt;/code&gt; command. Running &lt;code&gt;bundle lock&lt;/code&gt; will resolve the Gemfile and write a Gemfile.lock, but will not download or install any gems.&lt;/p&gt;

&lt;p&gt;Next, for single-file scripts that still depend on gems, a &lt;code&gt;gemfile&lt;/code&gt; method is provided by &lt;code&gt;require "bundler/inline"&lt;/code&gt;. This method will not generate a lock, so be careful what gem versions you allow! Check out the &lt;a href="https://github.com/bundler/bundler/blob/master/lib/bundler/inline.rb"&gt;inline docs&lt;/a&gt; for details and examples.&lt;/p&gt;

&lt;p&gt;Are you tired of being told to HTTParty hard? This option’s for you. Run &lt;code&gt;bundle config ignore_messages.httparty true&lt;/code&gt; to silence HTTParty for good, or run &lt;code&gt;bundle config ignore_messages true&lt;/code&gt; to turn off all messages forever.&lt;/p&gt;

&lt;p&gt;Who needs a jetpack future when you can have optional groups? The long-requested ability to create groups of gems that are not installed by default is finally here. Mark a group as optional using &lt;code&gt;group :name, optional: true do&lt;/code&gt;, and then opt in to installing an optional group with &lt;code&gt;bundle install --with name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the same time as adding the long-awaited optional groups, we added groups that can be installed (or not) completely automatically! Provide a lambda or proc to determine if gems in the &lt;code&gt;install_if&lt;/code&gt; group should be installed, and they will be. Or not. For an example, check out the &lt;a href="/bundler-site/v1.10/man/gemfile.5.html#INSTALL_IF-install_if-"&gt;Gemfile&lt;/a&gt; documentation. The idea for this feature came entirely from discussions with &lt;a href="https://rubytogether.org/members"&gt;Ruby Together members&lt;/a&gt;. If you’d like to see more features like this one, or even suggest some of your own, &lt;a href="https://rubytogether.org/join"&gt;join Ruby Together today&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s not all! There are several more smaller changes, including better support for gems with native extensions on RubyGems 2.2. Check out the full &lt;a href="https://github.com/bundler/bundler/blob/1-10-stable/CHANGELOG.md"&gt;1.10 changelog&lt;/a&gt; for the entire list.&lt;/p&gt;

&lt;h3 id="bundled-with"&gt;BUNDLED WITH&lt;/h3&gt;

&lt;p&gt;This release also contains a change that has been somewhat controversial: Bundler 1.10 will add the Bundler version to the &lt;code&gt;Gemfile.lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While the intended workflow involves only one lock change per Bundler version, the results in real life have been very frustrating. The &lt;em&gt;extremely&lt;/em&gt; short explanation is that the problem will disappear once the entire team (rather than only part of the team) upgrades to Bundler 1.9.10 or higher.&lt;/p&gt;

&lt;p&gt;Here’s the long explanation: Bundler 1.10 adds the BUNDLED WITH section to the lock, while Bundler 1.9 removes it. When a team includes some developers on 1.9 or older, and some developers on 1.10 or higher, it’s easy to end up in a situation with commits changing the lock back and forth. The simplest way to stop that problem is to upgrade to 1.10 by running &lt;code&gt;gem install bundler&lt;/code&gt;. When Bundler 1.10 or higher sees a BUNDLED WITH section, it will leave it in the file.&lt;/p&gt;

&lt;p&gt;This change turned out to be a lot more problematic than we were expecting because of the way Spring works. Knowing what I know now, I would have rolled out this change completely differently to reduce this problem, but it’s too late for that now. :/ We designed the change to only activate when you run an “install” command, like &lt;code&gt;bundle install&lt;/code&gt; or &lt;code&gt;bundle update&lt;/code&gt;. If you just use &lt;code&gt;bundle exec&lt;/code&gt;, the lock does not change. We didn’t count on Spring, which runs &lt;code&gt;bundle install --local&lt;/code&gt; all the time in the background without notifying users. To stop that from happening, we’ve released a version of Bundler (1.10.4) that works around Spring.&lt;/p&gt;

&lt;p&gt;The last issue is that some developers refuse to upgrade from 1.9 to 1.10, for whatever reason, keeping the problem alive. To address that, we’re releasing a final update to 1.9 later today that will simply ignore the BUNDLED WITH section, rather than deleting it.&lt;/p&gt;

&lt;p&gt;The reason that we made the change is pretty straightforward: It has been a long-term source of bug reports that users are often on a version of Bundler so old it won’t work for a project, but they have no way to tell. We’ve wanted to fix this by tracking the Bunder version in the lock file since right after 1.0.0 came out. Unfortunately, there was a bug in the 1.0.x lock parser that meant we had to wait until 1.0 fell out of use. We also need to start tracking the Bundler version in the bundle now because we plan to release 2.0 (with big improvements, but breaking some backwards compatibility).&lt;/p&gt;

&lt;p&gt;At this point in the explanation, several people have then asked if we could just track the minor version, without the bugfix version. What if it was just 1.10? Would that give most of the benefits without the git churn? Despite this, there are two factors that made us decide to stick with patch level.&lt;/p&gt;

&lt;p&gt;First, and most importantly, as soon as everyone is on 1.10+, the churn completely disappears. Version 1.10.1 will not change a lock that says it was bundled with 1.10.3. The absolute worst case once everyone has upgraded to Bundler 1.9.10 or higher is a single commit per version of Bundler, followed by no git churn.&lt;/p&gt;

&lt;p&gt;Second, Bundler patch level releases definitely fix bugs, and oftentimes those bugs are big enough to break &lt;code&gt;bundle install&lt;/code&gt; for certain subsets of users. Only tracking minor version would be similar to only tracking the minor version of Rails—it’s not really feasible to say “oh, you can use any 4.2.x version of Rails”, because the x allows security holes, breaking bugs, and other problems.&lt;/p&gt;

&lt;p&gt;So, in conclusion, the change was never intended to be this disruptive, we’re doing what we can to reduce the impact, and the problem should be completely resolved by updating Bundler to 1.10 (or even the latest 1.9 release, if some of your team want to stay on 1.9).&lt;/p&gt;

&lt;p&gt;Thanks for the feedback, everyone!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hello, Bundler 1.9!</title>
    <link rel="alternate" href="http://bundler.io/bundler-site/blog/2015/03/21/hello-bundler-19.html"/>
    <id>http://bundler.io/bundler-site/blog/2015/03/21/hello-bundler-19.html</id>
    <published>2015-03-21T09:00:00+09:00</published>
    <updated>2015-07-27T19:13:05+09:00</updated>
    <author>
      <name>Samuel Giddins</name>
    </author>
    <content type="html">&lt;p&gt;A mere month and a half after the release of Bundler 1.8, we’re happy to announce our next act: Bundler 1.9.&lt;/p&gt;

&lt;p&gt;While the &lt;a href="https://github.com/bundler/bundler/blob/v1.9.0/CHANGELOG.md#190-2015-03-20"&gt;CHANGELOG&lt;/a&gt; for this version might seem rather short (and light on big new features), there is one cool thing to talk about: &lt;a href="https://github.com/CocoaPods/Molinillo"&gt;Molinillo&lt;/a&gt;. Molinillo is a new dependency resolution algorithm developed for &lt;a href="http://cocoapods.org"&gt;CocoaPods&lt;/a&gt; – the Cocoa dependency manager. Now, Bundler shares its dependency resolver – one of the most integral parts of a dependency manager – with CocoaPods, with the core logic being independently documented and tested. Molinillo was developed thanks to a &lt;a href="https://stripe.com/blog/stripe-open-source-retreat"&gt;generous grant from Stripe&lt;/a&gt; for the express purpose of being a generic dependency resolution algorithm that was sharable across different code bases – specifically CocoaPods and Bundler (and possibly even &lt;a href="https://github.com/rubygems/rubygems/pull/1189"&gt;RubyGems&lt;/a&gt;)!&lt;/p&gt;

&lt;h4 id="dependencies-in-bundler"&gt;Dependencies in Bundler?&lt;/h4&gt;

&lt;p&gt;Having dependencies inside Bundler itself is a bit crazy: Bundler is a dependency manager &lt;em&gt;for&lt;/em&gt; gems, written in Ruby. How could it use gems itself? Well, it can’t &lt;em&gt;really&lt;/em&gt;. But we can cheat a bit by shipping Molinillo’s source files inside the &lt;code&gt;bundler&lt;/code&gt; gem. This has its own challenge – what if a gem (such as CocoaPods), requires a different version of &lt;code&gt;molinillo&lt;/code&gt; (or &lt;code&gt;thor&lt;/code&gt;, which is likewise vendored in Bundler)? The solution is to prefix the top-level namespace constant in the vendored gem with Bundler’s own namespace. The upshot of this song-and-dance is that Bundler can share open source libraries just like every other gem!&lt;/p&gt;

&lt;h4 id="updating"&gt;Updating&lt;/h4&gt;

&lt;p&gt;To install the last release of Bundler you can run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ [sudo] gem install bundler
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For all the details, don’t miss the Changelog!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bundler template moves bins to exe</title>
    <link rel="alternate" href="http://bundler.io/bundler-site/blog/2015/03/20/moving-bins-to-exe.html"/>
    <id>http://bundler.io/bundler-site/blog/2015/03/20/moving-bins-to-exe.html</id>
    <published>2015-03-20T09:00:00+09:00</published>
    <updated>2015-04-03T13:50:15+09:00</updated>
    <author>
      <name>Benjamin Fleischer</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/bundler/bundler/blob/v1.8.0/lib/bundler/templates/newgem/newgem.gemspec.tt"&gt;Bundler 1.8&lt;/a&gt;
&lt;a href="https://github.com/bundler/bundler/commit/ab3e21784c6c18702869c771fbe7ae23c82cc7c0"&gt;moves the executables directory in generated gemspecs from &lt;code&gt;bin/&lt;/code&gt; to &lt;code&gt;exe/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre class="highlight diff"&gt;&lt;span class="gd"&gt;-  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
&lt;/span&gt;&lt;span class="gi"&gt;+  spec.executables   = spec.files.grep(%r{^exe/}) { |f| File.basename(f) }
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This means that the Bundler-generated gems can use and commit binstubs,
such as &lt;code&gt;bin/rake&lt;/code&gt;, to the &lt;code&gt;bin/&lt;/code&gt; directory.  Only files in the &lt;code&gt;exe/&lt;/code&gt; directory
will be built with the gem.  Prior to this change, we would need to either not
commit binstubs or change the gemspec not to include all files in &lt;code&gt;bin&lt;/code&gt; as
executables.&lt;/p&gt;

&lt;p&gt;There’s nothing that needs to be done for existing gems.  To modify an existing gem
to use this convention, we only need to move the executable(s), if any, into &lt;code&gt;exe/&lt;/code&gt;,
and modify the gemspec &lt;code&gt;executables&lt;/code&gt; directory to &lt;code&gt;exe/&lt;/code&gt;, as above.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;exe/&lt;/code&gt; directory for gem executables frees up &lt;code&gt;bin/&lt;/code&gt; to be used for
&lt;code&gt;bundle binstubs rspec-core; bin/rspec&lt;/code&gt; and other libraries that have adopted this
convention, such as Rails, which installs the scripts &lt;code&gt;bin/rails&lt;/code&gt;, &lt;code&gt;bin/rake&lt;/code&gt;, and
&lt;code&gt;bin/setup&lt;/code&gt; with all generated apps.&lt;/p&gt;

&lt;h3 id="background"&gt;Background&lt;/h3&gt;

&lt;p&gt;This is a new convention.  The current practice of both specifying &lt;code&gt;bin/&lt;/code&gt; as the
&lt;code&gt;executables&lt;/code&gt; directory and where we put binstubs and other development-only
executables such as &lt;code&gt;bin/rails&lt;/code&gt; or &lt;code&gt;bin/setup&lt;/code&gt;, meant that Bundler-generated
gems with executables were quite likely to have these development executables
included in the built gem, and then installed along with the gem.&lt;/p&gt;

&lt;p&gt;Rather than make the gemspec template more restrictive by only specifying one
executable in &lt;code&gt;bin/&lt;/code&gt; as an &lt;code&gt;executable&lt;/code&gt;, the Bundler team has chosen to use a
different directory, &lt;code&gt;exe/&lt;/code&gt;, as the &lt;code&gt;executables&lt;/code&gt; directory in the template.&lt;/p&gt;

&lt;p&gt;This change is just part of the evolving conventions in gem development.  RSpec,
for example, has had its executable &lt;a href="https://github.com/RSpec/RSpec-core/blob/v2.7.0/RSpec-core.gemspec#L19"&gt;in &lt;code&gt;exe&lt;/code&gt; since 2011&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of the kind of buggy behavior you might see when binstubs are
build with a gem as executables.&lt;/p&gt;

&lt;h4 id="demo"&gt;Demo&lt;/h4&gt;

&lt;pre class="highlight shell"&gt;bundle gem new_gem
git add .; git commit -am &lt;span class="s2"&gt;"Initial Commit"&lt;/span&gt;
bundle binstub rake
git add bin/rake; git commit -am &lt;span class="s2"&gt;"bundle binstub rake"&lt;/span&gt;
bundle
which rake &lt;span class="c"&gt;#=&amp;gt;  ~/.rvm/gems/ruby-2.1.5/bin/rake&lt;/span&gt;
cat &lt;span class="sb"&gt;`&lt;/span&gt;which rake&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby_executable_hooks&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This file was generated by RubyGems.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The application 'new_gem' is installed as part of a gem, and&lt;/span&gt;
&lt;span class="c1"&gt;# this file is here to facilitate running it.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;

&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 0"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;force_encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"BINARY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt; &lt;span class="ss"&gt;:force_encoding&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/\A_(.*)_\z/&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;correct?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;
    &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'new_gem'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bin_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'new_gem'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rake'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is found in the last two lines:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'new_gem'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bin_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'new_gem'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rake'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The rake executable no longer uses the &lt;code&gt;rake&lt;/code&gt; gem. It now requires &lt;code&gt;rake&lt;/code&gt; from &lt;code&gt;new_gem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, when I run rake elsewhere, I get the warning:&lt;/p&gt;

&lt;pre class="highlight shell"&gt;Bundler is using a binstub that was created &lt;span class="k"&gt;for &lt;/span&gt;a different gem.
This is deprecated, &lt;span class="k"&gt;in &lt;/span&gt;future versions you may need to &lt;span class="sb"&gt;`&lt;/span&gt;bundle binstub new_gem&lt;span class="sb"&gt;`&lt;/span&gt; to work around a system/bundle conflict.
&lt;/pre&gt;
&lt;p&gt;This happened because of the line in the gemspec that installed all git-versioned files in &lt;code&gt;bin/&lt;/code&gt;:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;executables&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;%r{^bin/}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To fix our rake install:&lt;/p&gt;

&lt;pre class="highlight shell"&gt;gem pristine rake
&lt;span class="c"&gt;# (In your gem folder, you may also want to run `bundle exec gem pristine rake`)&lt;/span&gt;
cat &lt;span class="sb"&gt;`&lt;/span&gt;which rake&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby_executable_hooks&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# This file was generated by RubyGems.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The application 'rake' is installed as part of a gem, and&lt;/span&gt;
&lt;span class="c1"&gt;# this file is here to facilitate running it.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;

&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 0"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
  &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;force_encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"BINARY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt; &lt;span class="ss"&gt;:force_encoding&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/\A_(.*)_\z/&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;correct?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;
    &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rake'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bin_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'rake'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rake'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;To fix our gemspec:&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;executables&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;%r{^exe/}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or just delete the line altogether, since new_gem doesn’t have an executable.&lt;/p&gt;

&lt;p&gt;If it did, we could continue to use &lt;code&gt;bin/&lt;/code&gt;, create the file as &lt;code&gt;bin/new_gem&lt;/code&gt; and
specify it as the only executable.&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;executables&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"new_gem"&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or use the new &lt;code&gt;exe/&lt;/code&gt; convention, create a file such as &lt;code&gt;exe/new_gem&lt;/code&gt;, and not worry.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>루비 투게더를 발표합니다.</title>
    <link rel="alternate" href="http://bundler.io/bundler-site/blog/2015/03/19/announcing-ruby-together.html"/>
    <id>http://bundler.io/bundler-site/blog/2015/03/19/announcing-ruby-together.html</id>
    <published>2015-03-19T11:56:00+09:00</published>
    <updated>2015-12-13T17:40:44+09:00</updated>
    <author>
      <name/>
    </author>
    <content type="html">&lt;p&gt;오늘날 루비 개발자들이 사용하는 &lt;a href="https://bundler.io"&gt;번들러&lt;/a&gt;, &lt;a href="https://rubygems.org/pages/download"&gt;루비젬스&lt;/a&gt;, &lt;a href="https://rubygems.org/"&gt;RubyGems.org&lt;/a&gt;를 포함하여 모든 인프라는 유지보수하고 개발한 것은 자원봉사자들이었습니다. 커뮤니티의 공동 자원에 대해 소유권을 가진 회사가 없어서 긍정적인 면도 있지만, 커뮤니티 공동 인프라를 위해서 일하는 사람은 댓가없이 시간을 쪼개어 기여해야 했기에 어려운 점이 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 커뮤니티가 문제를 해결할 수 있도록 &lt;a href="https://rubytogether.org"&gt;루비 투게더&lt;/a&gt;를 설립했습니다. 루비 투게더는 커뮤니티 모두가 사용하는 &lt;a href="https://rubytogether.org/projects"&gt;공공의 공동 인프라&lt;/a&gt;를 개선하고 유지보수하는 일과 비상 대기조를 운영할 기금을 마련할 것입니다.&lt;/p&gt;

&lt;p&gt;구성원들에게 &lt;a href="https://rubytogether.org/benefits"&gt;혜택&lt;/a&gt;을 제공하겠습니다. 우선, 지식에 접근하고 상호 교환하는 기회를 제공하며, &lt;a href="https://rubybench.org"&gt;RubyBench.org&lt;/a&gt;를 커뮤니티 성능 벤치마킹 자원으로 부족함이 없도록 바꾸겠습니다. 그리고 중요한 보안사항과 디프리케이션을 관리하고 구성원에게 보고하겠습니다.&lt;/p&gt;

&lt;p&gt;루비를 중심으로 놀랍도록 성장한 커뮤니티는 개발자라면 누구나 사용할 만한 매우 훌륭하고 유용한 툴을 많이 만들었습니다. 누구에게나 유용한 최선의 툴과 커뮤니티를 만들기 위해 같이 협력합시다.&lt;/p&gt;

&lt;p&gt;여러분과 여러분의 회사가 루비로 만든 자유 / 공개 소프트웨어 툴에서 혜택을 받았다면, 루비 투게더의 구성원이 되어 유용한 툴을 응원하고 도와주세요. 구성원이 내는 회비는 루비를 사용하는 모든 사람들에게 헤택을 주는 일에 기금으로 직접 사용하며, 소득공제가 됩니다. 개인과 회사 자격으로 회원 가입 가능합니다. &lt;a href="https://rubytogether.org/join"&gt;지금 참여하세요!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 80%"&gt;이 글은 &lt;a href="https://rubytogether.org/news/2015-03-17-announcing-ruby-together"&gt;루비 투게더&lt;/a&gt;를 알릴 목적으로 작성하였습니다.&lt;/span&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Gem not found error on 1.7.0</title>
    <link rel="alternate" href="http://bundler.io/bundler-site/blog/2014/08/15/gem-not-found-error-on-1-7-0.html"/>
    <id>http://bundler.io/bundler-site/blog/2014/08/15/gem-not-found-error-on-1-7-0.html</id>
    <published>2014-08-16T02:02:00+09:00</published>
    <updated>2015-04-03T13:50:15+09:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;p&gt;After the release of Bundler 1.7.0 yesterday, we discovered a bug that can cause Bundler to report that a gem was not found, even though that gem is available from one of the relevant sources. We’re understand the problem, and we’re working on a fix as fast as we can. In the meantime, it’s possible to work completely around the problem by adding the &lt;code&gt;--full-index&lt;/code&gt; option when you run &lt;code&gt;bundle install&lt;/code&gt;. I fully recognize that it sucks to have a regression in a security update, and I’m sorry that this happened. I can’t guarantee something like this well never happen again, but we’re adding tests to prevent this particular bug from recurring.&lt;/p&gt;

&lt;p&gt;Sorry it’s broken; we’re working on fixing it. In the meantime, please work around the issue with &lt;code&gt;bundle install --full-index&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
